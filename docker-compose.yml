# Questo è il tuo docker-compose.yml completo e DEFINITIVO
services:
  
  # ===============================================
  # Servizio Spark e App Python
  # ===============================================
  spark-app:
    build: .  # Usa il Dockerfile nella cartella corrente
    container_name: spark-app
    depends_on:
      - kafka
    networks:
      - logstream-network
    volumes:
      # 1. Per il codice: Monta la cartella locale
      - .:/app
      
      # 2. Per i dati: Usa volumi nominati per i permessi
      - delta-data:/tmp/delta-lake
      - checkpoint-data:/tmp/checkpoints
      # 3. NUOVO VOLUME: Per salvare i modelli ML
      - model-data:/tmp/ml_models
    
    command: >
      tail -f /dev/null

  # ===============================================
  # Stack Kafka
  # ===============================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - logstream-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_T OPIC_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - logstream-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - logstream-network

  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-setup
    depends_on:
      - kafka
    networks:
      - logstream-network
    command: >
      bash -c "
        echo 'In attesa che Kafka (kafka:29092) sia pronto...' &&
        cub kafka-ready -b kafka:29092 1 60 &&
        echo 'Kafka è pronto! Creo il topic web-logs...' &&
        kafka-topics --create --if-not-exists --topic web-logs --bootstrap-server kafka:29092 --replication-factor 1 --partitions 3 &&
        echo 'Topic web-logs creato con successo.'
      "

# ===============================================
# Definizione dei Volumi Nominati
# ===============================================
volumes:
  # Volumi per Kafka
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  
  # Volumi per Spark (risolve i problemi di permessi)
  delta-data:
  checkpoint-data:
  # NUOVO VOLUME:
  model-data:

# ===============================================
# Definizione della Rete
# ===============================================
networks:
  logstream-network:
    driver: bridge